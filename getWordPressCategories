/* 
Fetches WordPress categories to Google Sheets
Built by https://twitter.com/jspanom
GitHub Repo: https://github.com/jslytics-data/WP2GSheets
WordPress API Reference: https://developer.wordpress.org/rest-api/reference/categories/
*/
function getWordpressCategories() {
  const siteDomain = "techcrunch.com"; // WordPress site domain to pull categories from 
  const limit = 50; // Maximum number of categories to fetch from the WordPress site. Add 0 to get all categories
  const spreadsheetId = "1g4cKKqjduf3SxAiVXE3dNODD1o5bby_X4tJ1aiBWDoI"; // Set the ID of the Google Sheet where the WordPress categories data will be saved.
  const sheetName = "WP - Categories"; // (Not recommended to change). Name of the sheet where the WordPress categories data will be saved.
  const fields = ["id","name","count","link","description"]; // Set the fields to retrieve from each category. developer.wordpress.org/rest-api/reference/categories/
  const args = {
    orderby: "count", // Sort collection by object attribute.One of: id, count, description, name, slug, term_group
    order: "desc", // Order sort attribute ascending or descending.
    hide_empty: "false", // Whether to hide terms not assigned to any posts. Default: false
    exclude: "", // Ensure result set excludes specific IDs.
    include: "", // Limit result set to specific IDs.
    parent: "", // Limit result set to terms assigned to a specific parent ID.
    post: "", // Limit result set to terms assigned to a specific post.
    slug: "", // Limit result set to terms with one or more specific slugs.
    include_slugs: "", // Limit result set to terms with one or more specific slugs.
    search: "", // Limit results to those matching a string.
    context: "view", // Scope under which the request is made (view, embed, edit)
  };
  
  // Call the fetchWordPressCategoriesData function with the specified parameters.
  fetchWordPressCategoriesData(siteDomain, spreadsheetId, sheetName, limit, fields, args);
  autoSheetFormatting(spreadsheetId,sheetName)
}

function fetchWordPressCategoriesData(siteDomain, spreadsheetId, sheetName, limit, fields, args) {
	const sheet = SpreadsheetApp.openById(spreadsheetId).getSheetByName(sheetName) || SpreadsheetApp.openById(spreadsheetId).insertSheet(sheetName);
	sheet.clearContents();

	let data = [];
	let page = 1;
	const perPage = 100;
	let categoriesCount = 0;

	let url = buildCategoriesUrl(siteDomain, perPage, page, fields, args);

	while (true) {
		const response = UrlFetchApp.fetch(url);
		const newData = JSON.parse(response.getContentText());
		const filteredData = limit ? newData.slice(0, limit - categoriesCount) : newData;
		data = data.concat(filteredData);
		categoriesCount += filteredData.length;

		if (newData.length < perPage || (limit && categoriesCount >= limit)) {
			break;
		}

		page++;
		url = buildCategoriesUrl(siteDomain, perPage, page, fields, args);
	}

	const headers = fields.map(field => {
		return `${field.charAt(0).toUpperCase()}${field.slice(1)}`;
	});
	const rows = data.map(category => {
    const row = fields.map(field => {
      let fieldValue = category[field];

      if (Array.isArray(fieldValue)) {
        return fieldValue.map(val => {
          return val.toString();
        }).join(", ");
      } else {
        return fieldValue !== undefined && fieldValue !== null ? fieldValue.toString() : "";
      }
    });
    return row;
  });

  if (headers.length > 0 && rows.length > 0) {
    sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    sheet.getRange(2, 1, rows.length, headers.length).setValues(rows);
  }
}

function buildCategoriesUrl(siteDomain, perPage, page, fields, args) {
  let url = `https://${siteDomain}/wp-json/wp/v2/categories?per_page=${perPage}&page=${page}`;

  for (let key in args) {
    if (args.hasOwnProperty(key) && args[key] !== "") {
      url += `&${key}=${encodeURIComponent(args[key])}`;
    }
  }

  if (fields.length > 0) {
    url += `&_fields=${fields.join(",")}`;
  }

  return url;
}
