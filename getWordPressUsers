/* 
Fetches WordPress users to Google Sheets
Built by https://twitter.com/jspanom
GitHub Repo: https://github.com/jslytics-data/WP2GSheets
WordPress API Reference: https://developer.wordpress.org/rest-api/reference/users/
*/
function getWordpressUsers() {
  const siteDomain = "techcrunch.com"; // WordPress site domain to pull users from 
  const limit = 50; // Maximum number of users to fetch from the WordPress site. Add 0 to get all users
  const spreadsheetId = "1g4cKKqjduf3SxAiVXE3dNODD1o5bby_X4tJ1aiBWDoI"; // Set the ID of the Google Sheet where the WordPress users data will be saved.
  const sheetName = "WP - Users"; // (Not recommended to change). Name of the sheet where the WordPress users data will be saved.
  const fields = ["id","name","link"]; // Set the fields to retrieve from each user. developer.wordpress.org/rest-api/reference/users/
  const args = {
    context: "view", // Scope under which the request is made (view, embed, edit)
    exclude: "", // Ensure result set excludes specific IDs.
    include: "", // Limit result set to specific IDs.
    offset: "", // Offset the result set by a specific number of items.
    order: "asc", // Order sort attribute ascending or descending.
    orderby: "id", // Sort collection by object attribute.One of: id, include, name, registered_date, slug, email, url
    per_page: 100, // Maximum number of items to be returned in result set. Default: 10
    roles: "", // Limit result set to users matching at least one specific role provided. Accepts csv list or single role.
    search: "", // Limit results to those matching a string.
    who: "" // Limit result set to users who are considered authors. Default: (empty string)
};

  
  // Call the fetchWordPressUsersData function with the specified parameters.
  fetchWordPressUsersData(siteDomain, spreadsheetId, sheetName, limit, fields, args);
  autoSheetFormatting(spreadsheetId,sheetName)
}

function fetchWordPressUsersData(siteDomain, spreadsheetId, sheetName, limit, fields, args) {
	const sheet = SpreadsheetApp.openById(spreadsheetId).getSheetByName(sheetName) || SpreadsheetApp.openById(spreadsheetId).insertSheet(sheetName);
	sheet.clearContents();

	let data = [];
	let page = 1;
	const perPage = 100;
	let usersCount = 0;

	let url = buildUsersUrl(siteDomain, perPage, page, fields, args);

	while (true) {
		const response = UrlFetchApp.fetch(url);
		const newData = JSON.parse(response.getContentText());
		const filteredData = limit ? newData.slice(0, limit - usersCount) : newData;
		data = data.concat(filteredData);
		usersCount += filteredData.length;

		if (newData.length < perPage || (limit && usersCount >= limit)) {
			break;
		}

		page++;
		url = buildUsersUrl(siteDomain, perPage, page, fields, args);
	}

	const headers = fields.map(field => {
		return `${field.charAt(0).toUpperCase()}${field.slice(1)}`;
	});
	const rows = data.map(user => {
		const row = fields.map(field => {
			let fieldValue = user[field];

			if (Array.isArray(fieldValue)) {
				return fieldValue.map(val => {
					return val.toString();
				}).join(", ");
			} else if (typeof fieldValue === 'object' && fieldValue.hasOwnProperty('rendered')) {
				return fieldValue.rendered;
			} else if (field === 'avatar_urls' && typeof fieldValue === 'object') {
				return fieldValue['24'];
			} else {
				return fieldValue !== undefined && fieldValue !== null ? fieldValue.toString() : "";
			}
		});
		return row;
	});

	if (headers.length > 0 && rows.length > 0) {
		sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
		sheet.getRange(2, 1, rows.length, headers.length).setValues(rows);
	}
}

function buildUsersUrl(siteDomain, perPage, page, fields, args) {
	let url = `https://${siteDomain}/wp-json/wp/v2/users?per_page=${perPage}&page=${page}`;

	for (let key in args) {
		if (args.hasOwnProperty(key) && args[key] !== "") {
			url += `&${key}=${encodeURIComponent(args[key])}`;
		}
	}

	if (fields.length > 0) {
		url += `&_fields=${fields.join(",")}`;
	}

	return url;
}
