/* 
Fetches WordPress pages to Google Sheets
Built by https://twitter.com/jspanom
GitHub Repo: https://github.com/jslytics-data/WP2GSheets
WordPress API Reference: https://developer.wordpress.org/rest-api/reference/pages/
*/
function getWordpressPages() {
  const siteDomain = "techcrunch.com"; // WordPress site domain to pull pages from 
  const limit = 50; // Maximum number of pages to fetch from the WordPress site. Add 0 to get all pages
  const spreadsheetId = "1g4cKKqjduf3SxAiVXE3dNODD1o5bby_X4tJ1aiBWDoI"; // Set the ID of the Google Sheet where the WordPress pages data will be saved.
  const sheetName = "WP - Pages"; // (Not recommended to change). Name of the sheet where the WordPress pages data will be saved.
  const fields = ["id","date","title","link"]; // Set the fields to retrieve from each page. developer.wordpress.org/rest-api/reference/pages/
  const args = {
    orderby: "date", // Sort collection by object attribute.One of: author, date, id, include, modified, parent, relevance, slug, include_slugs, title
    order: "desc", // Order sort attribute ascending or descending.
    after: "2000-01-01T00:00:00Z", // Limit response to pages published after a given ISO8601 compliant date.
    before: "", // Limit response to pages published before a given ISO8601 compliant date.
    search: "", // Limit results to those matching a string.
    context: "view", //Scope under which the request is made (view, embed, edit)
    status: "publish", // Limit result set to pages assigned one or more statuses. Default: publish
    exclude: "", // Ensure result set excludes specific IDs.
    include: "", // Limit result set to specific IDs.
    parent: "", // Limit result set to pages assigned a specific parent ID.
    menu_order: "", // Limit result set to pages assigned a specific menu order.
    slug: "", // Limit result set to pages with one or more specific slugs.
  };
  
  // Call the fetchWordPressPagesData function with the specified parameters.
  fetchWordPressPagesData(siteDomain, spreadsheetId, sheetName, limit, fields, args);
  autoSheetFormatting(spreadsheetId,sheetName)
}

function fetchWordPressPagesData(siteDomain, spreadsheetId, sheetName, limit, fields, args) {
  const sheet = SpreadsheetApp.openById(spreadsheetId).getSheetByName(sheetName) || SpreadsheetApp.openById(spreadsheetId).insertSheet(sheetName);
  sheet.clearContents();

  let data = [];
  let page = 1;
  const perPage = 100;
  let pagesCount = 0;

  let url = buildPagesUrl(siteDomain, perPage, page, fields, args);

  while (true) {
    const response = UrlFetchApp.fetch(url);
    const newData = JSON.parse(response.getContentText());
    const filteredData = limit ? newData.slice(0, limit - pagesCount) : newData;
    data = data.concat(filteredData);
    pagesCount += filteredData.length;

    if (newData.length < perPage || (limit && pagesCount >= limit)) {
      break;
    }

    page++;
    url = buildPagesUrl(siteDomain, perPage, page, fields, args);
  }

  const headers = fields.map(field => {
    return `${field.charAt(0).toUpperCase()}${field.slice(1)}`;
  });
  const rows = data.map(page => {
    const row = fields.map(field => {
      let fieldValue = page[field];

      if (Array.isArray(fieldValue)) {
        return fieldValue.map(val => {
          return val.toString();
        }).join(", ");
      } else if (typeof fieldValue === "object" && fieldValue !== null) {
        if (field === "meta") {
          return JSON.stringify(fieldValue);
        } else if (fieldValue.hasOwnProperty("rendered")) {
          return fieldValue.rendered;
        }
      }

      return fieldValue !== undefined && fieldValue !== null ? fieldValue.toString() : "";
    });
    return row;
  });

  if (headers.length > 0 && rows.length > 0) {
    sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    sheet.getRange(2, 1, rows.length, headers.length).setValues(rows);
  }
}


function buildPagesUrl(siteDomain, perPage, page, fields, args) {
  let url = `https://${siteDomain}/wp-json/wp/v2/pages?per_page=${perPage}&page=${page}`;

  for (let key in args) {
    if (args.hasOwnProperty(key) && args[key] !== "") {
      url += `&${key}=${encodeURIComponent(args[key])}`;
    }
  }

  if (fields.length > 0) {
    url += `&_fields=${fields.join(",")}`;
  }

  return url;
}

